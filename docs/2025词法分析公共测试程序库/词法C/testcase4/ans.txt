INTTK int
IDENFR isSymmetry
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
INTTK int
IDENFR copy
ASSIGN =
IDENFR x
COMMA ,
IDENFR res
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR copy
NEQ !=
INTCON 0
SEMICN ;
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
IDENFR res
MULT *
INTCON 10
PLUS +
IDENFR copy
MOD %
INTCON 10
SEMICN ;
IDENFR copy
ASSIGN =
IDENFR copy
DIV /
INTCON 10
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR res
EQL ==
IDENFR x
RPARENT )
RETURNTK return
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR isPrime
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
MULT *
IDENFR i
LEQ <=
IDENFR x
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
MOD %
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
IDENFR getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
IDENFR a
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LEQ <=
IDENFR b
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "2\n"
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR i
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR isSymmetry
LPARENT (
IDENFR i
RPARENT )
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR isPrime
LPARENT (
IDENFR i
RPARENT )
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }