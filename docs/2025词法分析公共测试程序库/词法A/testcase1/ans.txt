INTTK int
IDENFR i
SEMICN ;
INTTK int
IDENFR ii
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR global_var
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR func
LPARENT (
RPARENT )
LBRACE {
STATICTK static
INTTK int
IDENFR x
ASSIGN =
INTCON 1
SEMICN ;
STATICTK static
INTTK int
IDENFR x1
ASSIGN =
INTCON 1
COMMA ,
IDENFR x2
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
COMMA ,
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
COMMA ,
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 2
COMMA ,
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 3
RPARENT )
LBRACE {
RBRACE }
IDENFR global_var
ASSIGN =
IDENFR global_var
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "crsb\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d crsb\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func3
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d crsb\n"
COMMA ,
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d %d crsb\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func5
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d %d crsb\n"
COMMA ,
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22373340\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR func
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR global_var
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR func
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR global_var
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 condition\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 condition\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 else\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
LEQ <=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 condition\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 else\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 condition\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 else\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 condition\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 else\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 condition\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 else\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
NEQ !=
NOT !
IDENFR i
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "You should see this\n"
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "continue test\n"
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "The %d time run for\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 9
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "break test\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
CONSTTK const
INTTK int
IDENFR i1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR c1
ASSIGN =
INTCON 114
SEMICN ;
CONSTTK const
INTTK int
IDENFR ii1
ASSIGN =
INTCON 1
COMMA ,
IDENFR ii2
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR cc1
ASSIGN =
INTCON 114
COMMA ,
IDENFR cc2
ASSIGN =
INTCON 514
SEMICN ;
CONSTTK const
INTTK int
IDENFR ia1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR hello
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
LBRACE {
INTCON 10
COMMA ,
INTCON 11
COMMA ,
INTCON 12
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test fot const array:%d %d %d\n"
COMMA ,
IDENFR ia1
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR ca1
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR hello
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR i2
SEMICN ;
INTTK int
IDENFR c2
SEMICN ;
INTTK int
IDENFR ii3
COMMA ,
IDENFR ii4
SEMICN ;
INTTK int
IDENFR cc3
COMMA ,
IDENFR cc4
SEMICN ;
INTTK int
IDENFR ia2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
INTTK int
IDENFR ia3
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR ca2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
INTTK int
IDENFR hello2
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
LBRACE {
INTCON 5
COMMA ,
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
SEMICN ;
IDENFR i2
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
IDENFR i2
ASSIGN =
MINU -
INTCON 1
SEMICN ;
IDENFR i2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR i2
ASSIGN =
INTCON 1
MULT *
INTCON 1
SEMICN ;
IDENFR i2
ASSIGN =
INTCON 1
DIV /
INTCON 1
SEMICN ;
IDENFR i2
ASSIGN =
INTCON 1
MINU -
INTCON 1
SEMICN ;
IDENFR i2
ASSIGN =
INTCON 1
MOD %
INTCON 2
SEMICN ;
IDENFR i2
ASSIGN =
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
MULT *
IDENFR i2
SEMICN ;
IDENFR i2
ASSIGN =
LPARENT (
INTCON 114
PLUS +
INTCON 3
RPARENT )
DIV /
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IDENFR i2
ASSIGN =
IDENFR i2
MULT *
INTCON 2
SEMICN ;
IDENFR i2
ASSIGN =
IDENFR i2
PLUS +
INTCON 2
SEMICN ;
IDENFR i2
ASSIGN =
IDENFR i2
DIV /
INTCON 1
SEMICN ;
IDENFR i2
ASSIGN =
IDENFR i2
MOD %
INTCON 2
SEMICN ;
IDENFR i2
ASSIGN =
IDENFR i2
MINU -
INTCON 2
SEMICN ;
IDENFR func1
LPARENT (
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR i1
RPARENT )
SEMICN ;
IDENFR func3
LPARENT (
IDENFR ia2
RPARENT )
SEMICN ;
IDENFR func4
LPARENT (
IDENFR i1
COMMA ,
IDENFR c1
RPARENT )
SEMICN ;
IDENFR func5
LPARENT (
IDENFR ca2
COMMA ,
IDENFR i1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i1
EQL ==
INTCON 1
OR ||
IDENFR c1
EQL ==
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Should be seen in ||\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i1
EQL ==
INTCON 1
AND &&
IDENFR c1
EQL ==
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Shouldn't be seen in &&\n"
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LEQ <=
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
OR ||
IDENFR i1
EQL ==
INTCON 1
AND &&
IDENFR c1
EQL ==
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Should in continue step(%d) with complex condition\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
NEQ !=
MINU -
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d Shouldn't be seen\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i1
EQL ==
INTCON 1
SEMICN ;
IDENFR i2
ASSIGN =
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i1
EQL ==
INTCON 1
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i2
ASSIGN =
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
LBRACE {
RBRACE }
IDENFR i2
ASSIGN =
IDENFR getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i2
RPARENT )
SEMICN ;
IDENFR c2
ASSIGN =
IDENFR getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR c2
RPARENT )
SEMICN ;
IDENFR c2
ASSIGN =
IDENFR getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c2
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }