INTTK int
IDENFR isPrime
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
MULT *
IDENFR i
LEQ <=
IDENFR x
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
MOD %
IDENFR i
EQL ==
INTCON 0
RPARENT )
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
ASSIGN =
IDENFR getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR last
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR pow
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR n
GRE >
INTCON 1
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR isPrime
LPARENT (
IDENFR n
RPARENT )
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
EQL ==
IDENFR last
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d^%d"
COMMA ,
IDENFR last
COMMA ,
IDENFR pow
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR pow
GRE >
INTCON 1
AND &&
IDENFR last
NEQ !=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d^%d * %d"
COMMA ,
IDENFR last
COMMA ,
IDENFR pow
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR pow
EQL ==
INTCON 1
AND &&
IDENFR last
NEQ !=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d * %d"
COMMA ,
IDENFR last
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR last
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
MULT *
IDENFR i
LEQ <=
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
MOD %
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR last
EQL ==
IDENFR i
RPARENT )
LBRACE {
IDENFR pow
ASSIGN =
IDENFR pow
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR pow
GRE >
INTCON 1
AND &&
IDENFR last
NEQ !=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d^%d * "
COMMA ,
IDENFR last
COMMA ,
IDENFR pow
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR pow
EQL ==
INTCON 1
AND &&
IDENFR last
NEQ !=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d * "
COMMA ,
IDENFR last
RPARENT )
SEMICN ;
RBRACE }
IDENFR last
ASSIGN =
IDENFR i
SEMICN ;
IDENFR pow
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IDENFR n
ASSIGN =
IDENFR n
DIV /
IDENFR i
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }