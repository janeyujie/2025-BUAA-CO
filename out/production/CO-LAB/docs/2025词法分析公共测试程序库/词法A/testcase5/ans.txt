CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 2
COMMA ,
IDENFR b
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
IDENFR b
LBRACK [
IDENFR a
RBRACK ]
SEMICN ;
INTTK int
IDENFR getNumber
LPARENT (
RPARENT )
LBRACE {
STATICTK static
INTTK int
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 1
OR ||
IDENFR x
EQL ==
INTCON 2
OR ||
IDENFR x
EQL ==
INTCON 3
OR ||
IDENFR x
EQL ==
INTCON 4
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "bingo\n"
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
IDENFR getint
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR min
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR flag
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR flag
AND &&
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR max
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR flag
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR flag
AND &&
IDENFR a
LSS <
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR fib
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 1
OR ||
IDENFR x
EQL ==
INTCON 0
RPARENT )
RETURNTK return
INTCON 1
SEMICN ;
RETURNTK return
IDENFR fib
LPARENT (
IDENFR x
MINU -
INTCON 1
RPARENT )
PLUS +
IDENFR fib
LPARENT (
IDENFR x
MINU -
INTCON 2
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func0
LPARENT (
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR c
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "hello bingo test\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR p1
ASSIGN =
IDENFR getNumber
LPARENT (
RPARENT )
SEMICN ;
STATICTK static
INTTK int
IDENFR p2
ASSIGN =
IDENFR b
LBRACK [
IDENFR c
MINU -
INTCON 1
RBRACK ]
SEMICN ;
IDENFR arr1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR p2
MULT *
INTCON 2
PLUS +
INTCON 3
MINU -
IDENFR a
MULT *
IDENFR b
LBRACK [
IDENFR a
RBRACK ]
PLUS +
IDENFR c
DIV /
INTCON 3
MULT *
INTCON 3
SEMICN ;
SEMICN ;
INTCON 222
SEMICN ;
STATICTK static
INTTK int
IDENFR p3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR p3
ASSIGN =
IDENFR min
LPARENT (
IDENFR p1
COMMA ,
INTCON 2
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
IDENFR p3
ASSIGN =
IDENFR max
LPARENT (
IDENFR min
LPARENT (
IDENFR p1
COMMA ,
INTCON 2
COMMA ,
INTCON 1
RPARENT )
COMMA ,
IDENFR max
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 0
RPARENT )
COMMA ,
INTCON 0
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "p3 is %d\n"
COMMA ,
IDENFR p3
RPARENT )
SEMICN ;
INTTK int
IDENFR fib_test
ASSIGN =
IDENFR fib
LPARENT (
INTCON 4
RPARENT )
PLUS +
IDENFR min
LPARENT (
IDENFR fib
LPARENT (
INTCON 2
RPARENT )
COMMA ,
IDENFR p1
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fib_test is %d\n"
COMMA ,
IDENFR fib_test
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR func0
LPARENT (
RPARENT )
EQL ==
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "no here\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
EQL ==
INTCON 3
OR ||
IDENFR func0
LPARENT (
RPARENT )
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "right here\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "c should be 3, and your answer is %d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR c
ASSIGN =
INTCON 2
SEMICN ;
IDENFR c
EQL ==
INTCON 2
AND &&
IDENFR func0
LPARENT (
RPARENT )
EQL ==
INTCON 1
OR ||
IDENFR func0
LPARENT (
RPARENT )
GRE >
INTCON 1
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "only for once and c should be print as 3, your c is %d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
EQL ==
INTCON 4
OR ||
IDENFR func0
LPARENT (
RPARENT )
EQL ==
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "here c should be 6, and your c is %d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }