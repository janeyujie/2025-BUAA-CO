INTTK int
IDENFR i
SEMICN ;
INTTK int
IDENFR ii
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "22373340\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 condition\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 condition\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 else\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
LEQ <=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 condition\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 else\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 condition\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 else\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 condition\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 else\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 condition\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if 1 else\n"
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "continue test\n"
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "The %d time run for\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 9
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "break test\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
CONSTTK const
INTTK int
IDENFR i1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR c1
ASSIGN =
INTCON 114
SEMICN ;
CONSTTK const
INTTK int
IDENFR ii1
ASSIGN =
INTCON 1
COMMA ,
IDENFR ii2
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR cc1
ASSIGN =
INTCON 114
COMMA ,
IDENFR cc2
ASSIGN =
INTCON 514
SEMICN ;
INTTK int
IDENFR i2
SEMICN ;
INTTK int
IDENFR c2
SEMICN ;
INTTK int
IDENFR ii3
COMMA ,
IDENFR ii4
SEMICN ;
INTTK int
IDENFR cc3
COMMA ,
IDENFR cc4
SEMICN ;
IDENFR i2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR i2
ASSIGN =
INTCON 1
MULT *
INTCON 1
SEMICN ;
IDENFR i2
ASSIGN =
INTCON 1
DIV /
INTCON 1
SEMICN ;
IDENFR i2
ASSIGN =
INTCON 1
MINU -
INTCON 1
SEMICN ;
IDENFR i2
ASSIGN =
INTCON 1
MOD %
INTCON 2
SEMICN ;
IDENFR i2
ASSIGN =
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
MULT *
IDENFR i2
SEMICN ;
IDENFR i2
ASSIGN =
LPARENT (
INTCON 114
PLUS +
INTCON 3
RPARENT )
DIV /
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }